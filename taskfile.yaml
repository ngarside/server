# This is free and unencumbered software released into the public domain.

version: 3
set: [pipefail]
vars:
  service:
    sh: |
      # If the 'service' variable has been set manually then use it as is:
      if [ -n '{{.service}}' ]
      then
        echo '{{.service}}'
        exit
      fi

      # If we're in a child directory then use the directory's name:
      if [ "$PWD" = "$(dirname '{{.USER_WORKING_DIR}}')" ]
      then
        echo "$(basename '{{.USER_WORKING_DIR}}')"
        exit
      fi

      # Otherwise default to nothing and let the precondition catch it:
      echo ''
tasks:

  default:
    cmd: task --list-all
    desc: List all tasks
    silent: true

  build:
    cmd: >-
      podman build
      --format docker
      --file {{.service}}/src/{{.service}}.dockerfile
      --tag ghcr.io/ngarside/{{.service}}
      $PWD
    desc: Build the container for the given service
    preconditions:
      - sh: test -n '{{.service}}'
        msg: task build service=<service>
    silent: true

  install:
    cmds:
      - pip install uv
      - uv pip install --requirements pyproject.toml
    desc: Install development dependencies
    silent: true

  purge:
    cmd: python3 scripts/src/purge.py
    desc: Delete all unused container images from the GitHub registry
    silent: true

  rebuild:
    cmd: >-
      podman build
      --format docker
      --file {{.service}}/src/{{.service}}.dockerfile
      --no-cache
      --tag ghcr.io/ngarside/{{.service}}
      $PWD
    desc: Build the container for the given service (without cache)
    preconditions:
      - sh: test -n '{{.service}}'
        msg: task rebuild service=<service>
    silent: true

  run:
    cmd: >-
      podman run
      --interactive --publish-all --rm --tty
      --volume /etc/pki/ca-trust/extracted/pem:/etc/pki/ca-trust/extracted/pem:ro
      ghcr.io/ngarside/{{.service}}
      {{.CLI_ARGS}}
    desc: Run the container for the given service
    preconditions:
      - sh: test -n '{{.service}}'
        msg: task run service=<service> [-- args]
    silent: true

  test:
    cmd: uv run --locked pytest -rA {{.service}}
    desc: Run tests for the given service
    preconditions:
      - sh: test -n '{{.service}}'
        msg: task test service=<service>
    silent: true
